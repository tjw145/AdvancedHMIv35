Option Strict On

Imports System.Runtime.CompilerServices
Imports System.Threading
Imports AdvancedHMIControls
Imports AdvancedHMIDrivers

Public Class MotionControlSolution

    'This class contains methods for sending commands to the flexure rig's programmable logic controller.
    '
    'Thomas Waybright, 9/15/2023

    '============== Hard-coded PLC memory address values: ===============

    Private plcACKaddress As String = "017384"                  'Move command acknowledgement bit address
    Private plcReceipt As String = "017383"                     'Sent to the PLC after data is transfered as a check
    Private plcRequestDataTrigger As String = "018287"          'Forces the PLC to ask for a command

    Private plcNextMoveTargetAddress As String = "416585"      'Memory addresss of next move command; current command handled internally by PLC /
    Private plcNextMoveAccelAddress As String = "416587"
    Private plcNextMoveDwellTimeAddress As String = "416589"   ' /
    Private plcRunAddress As String = "017183"                  '"Run" button
    Private plcStopAddress As String = "017186"                 '"Stop" button

    '====================================================================

    Public Pause As Boolean = False                             'A pause switch. Not sure if this will be used.
    Public ProgressValue As Decimal

    '====================================================================



    Public Sub OutputMotionSolution(modbusDriver As ModbusTCPCom, motionProfiles As List(Of MotionProfile), cycles As Integer)

        'Gets all point-to-point motion profiles generated by the MotionProfile class and loads them into a private, untouchable list while operations are being run.
        'Probably unnecessary but I'm paranoid at this point.
        Dim StepList As List(Of MotionProfile)
        StepList = motionProfiles
        Dim currentStepNumber As Integer = 0
        Dim totalNumberOfSteps As Integer = StepList.Count

        For cycleNumber As Integer = 0 To cycles

            While currentStepNumber < totalNumberOfSteps

                If cycleNumber = 0 Then

                    PrepareFirstStep(modbusDriver)

                End If

                If CBool(modbusDriver.Read(plcACKaddress)) = False Then 'Checks if ACK reads low before sending

                    If SendCommand(modbusDriver, StepList(currentStepNumber)) = True Then

                        currentStepNumber += 1

                    Else

                        Debug.WriteLine("Motion command procedure timeout")
                        End

                    End If

                End If

                ProgressValue = CalculateProgress(cycleNumber, cycles, currentStepNumber, StepList.Count)

            End While

            currentStepNumber = 0   'Resets after last step back to first step, until the full cycle is finished.

        Next

    End Sub

    Private Function SendCommand(driver As ModbusTCPCom, profile As MotionProfile) As Boolean

        Dim ACK As Boolean = False 'AdvancedHMI returns a string of "0" "1" "False" or "True." No explaination. No documentation. Just magic. Converting to bool seems to work I guess?

        While ACK = False

            For i As Integer = 0 To 10

                With driver

                    'Send motion profile data for current command
                    .Write(plcNextMoveTargetAddress, CStr(profile.TargetPositionPLC))
                    .Write(plcNextMoveAccelAddress, CStr(profile.AccelerationPLC))
                    .Write(plcNextMoveDwellTimeAddress, CStr(profile.DwellTime))

                    'Send PLC a data receipt after sending motion data
                    .BeginWrite(plcReceipt, 1, New String() {"1"})

                End With

                'Check for changes every (x)ms. Blocking function.
                ACK = CBool(driver.Read(plcACKaddress))
                Thread.Sleep(10)

                'Make (x) attempts to send the data; if not acknowledged by then, return false
                If i = 100 Then
                    Return False
                End If

            Next


        End While

        'If acknowledged, break loop and return true
        Return True


    End Function

    Private Sub PrepareFirstStep(driver As ModbusTCPCom)

        driver.BeginWrite(plcRequestDataTrigger, 1, New String() {"1"})     'Triggers request before first command execution
        driver.BeginWrite(plcRunAddress, 1, New String() {"1"})            'Triggers "start" bit
        Thread.Sleep(30)                                                    'Blocked wait time for 30ms to allow for the PLC to catch up. Maybe unneeded?

    End Sub

    Private Function CalculateProgress(cycleCurrent As Integer, totalCycles As Integer, stepCurrent As Integer, totalSteps As Integer) As Decimal

        Return (CDec(cycleCurrent - 1) * totalSteps) / (totalCycles * totalSteps)

    End Function

End Class
