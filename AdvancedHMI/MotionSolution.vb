Option Strict On

Imports System.Runtime.CompilerServices
Imports System.Threading
Imports System.Windows.Media.Animation
Imports AdvancedHMIControls
Imports AdvancedHMIDrivers

Public Class MotionControlSolution

    'This class contains methods for sending commands to the flexure rig's programmable logic controller.
    '
    'Thomas Waybright, 9/15/2023

    '============== Hard-coded PLC memory address values: ===============

    Private plcACKaddress As String = "017384"                  'Move command acknowledgement bit address
    Private plcReceipt As String = "017383"                     'Sent to the PLC after data is transfered as a check
    Private plcRequestDataTrigger As String = "018287"          'Forces the PLC to ask for a command

    Private plcNextMoveTargetAddress As String = "416585"      'Memory addresss of next move command; current command handled internally by PLC /
    Private plcNextMoveAccelAddress As String = "416587"
    Private plcNextMoveDwellTimeAddress As String = "416589"   ' /
    Private plcRunAddress As String = "017183"                  '"Run" button
    Private plcStopAddress As String = "017186"                 '"Stop" button
    Private plcResetAddress As String = "018383"                      ' Resets motion data

    '====================================================================

    Public ProgressValue As Decimal = 0
    Public MovesComplete As Boolean = False
    Public CancelRequest As Boolean = False
    Public Event OnFinished()

    '====================================================================



    Public Function OutputMotionSolution(modbusDriver As ModbusTCPCom, motionProfiles As List(Of MotionProfile), cycles As Integer) As Boolean

        'Gets all point-to-point motion profiles generated by the MotionProfile class and loads them into a private, untouchable list while operations are being run.
        'Probably unnecessary but I'm paranoid at this point.

        Dim StepList As List(Of MotionProfile)
        StepList = motionProfiles

        Dim totalNumberOfSteps As Integer = StepList.Count
        Dim currentStepNumber As Integer = 0
        Dim finalMoveTime As Integer = StepList(totalNumberOfSteps - 1).TotalMoveTimeMS

        Reset(modbusDriver) 'clear any weird remaining PLC values, just in case

        For cycleNumber As Integer = 0 To cycles - 1

            While currentStepNumber < totalNumberOfSteps

                If CancelRequest = True Then

                    MovesComplete = True
                    RaiseEvent OnFinished()
                    System.Windows.Forms.Application.DoEvents()
                    Exit Function

                End If

                If cycleNumber = 0 Then

                    PrepareFirstStep(modbusDriver)

                End If

                If CBool(modbusDriver.Read(plcACKaddress)) = False Then 'Checks if ACK reads low before sending

                    If SendCommand(modbusDriver, StepList(currentStepNumber)) = True Then

                        currentStepNumber += 1
                        ProgressValue = CalculateProgress(cycleNumber + 1, cycles, currentStepNumber + 1, StepList.Count)

                    Else

                        Debug.WriteLine("Motion command procedure timeout")
                        Exit Function

                    End If

                End If

            End While

            currentStepNumber = 0 'Reset step counter for new cycle

        Next

        'Wait for the final move to finish, plus a little extra, before triggering "stop" bit.
        Thread.Sleep(finalMoveTime + 200)
        modbusDriver.BeginWrite(plcStopAddress, 1, New String() {"1"})

        MovesComplete = True
        RaiseEvent OnFinished()
        modbusDriver.BeginWrite(plcRunAddress, 1, New String() {"0"}) 'Turn "run" bit off 
        System.Windows.Forms.Application.DoEvents()

        Return True

    End Function

    Private Function SendCommand(driver As ModbusTCPCom, profile As MotionProfile) As Boolean

        Dim ACK As Boolean = False 'AdvancedHMI returns a string of "0" "1" "False" or "True." No explaination. No documentation. Just magic. Converting to bool seems to work I guess?

        If CancelRequest = True Then

            MovesComplete = True
            RaiseEvent OnFinished()
            System.Windows.Forms.Application.DoEvents()
            Exit Function

        End If

        While ACK = False

            For i As Integer = 0 To 10

                Try

                    'Check for changes every (x)ms. Blocking function.
                    ACK = CBool(driver.Read(plcACKaddress))
                    Thread.Sleep(30)

                Catch ex As Exception

                    Debug.WriteLine("PLC connection error; could not check for ACK.")

                End Try

                Try

                    With driver

                        'Send motion profile data for current command
                        .Write(plcNextMoveTargetAddress, CStr(profile.TargetPositionPLC))
                        .Write(plcNextMoveAccelAddress, CStr(profile.AccelerationPLC))
                        .Write(plcNextMoveDwellTimeAddress, CStr(profile.DwellTime))

                        'Send PLC a data receipt after sending motion data
                        .BeginWrite(plcReceipt, 1, New String() {"1"})

                    End With

                Catch ex As Exception

                    Debug.WriteLine("PLC connection error; could not send data.")

                End Try

            Next


        End While

        'If acknowledged, break loop and return true
        Return True


    End Function

    Private Sub PrepareFirstStep(driver As ModbusTCPCom)

        driver.BeginWrite(plcRequestDataTrigger, 1, New String() {"1"})     'Triggers request before first command execution
        driver.BeginWrite(plcRunAddress, 1, New String() {"1"})             'Triggers "start" bit
        Thread.Sleep(30)                                                    'Blocked wait time for 30ms to allow for the PLC to catch up. Maybe unneeded?

    End Sub

    Private Function CalculateProgress(cycleCurrent As Integer, totalCycles As Integer, stepCurrent As Integer, totalSteps As Integer) As Decimal

        Return (CDec(cycleCurrent - 1) * totalSteps) / (totalCycles * totalSteps)

    End Function

    Public Sub Reset(driver As ModbusTCPCom)

        ProgressValue = 0
        CancelRequest = False
        MovesComplete = False
        driver.BeginWrite(plcResetAddress, 1, New String() {"1"})
        Thread.Sleep(30)                                                    'Blocked wait time for 30ms to allow for the PLC to catch up. Maybe unneeded?

    End Sub

End Class
